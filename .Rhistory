setwd("C:/Users/spo90/Desktop/STUDIES/Y2S2/NM2207/Week-9")
setwd("C:/Users/spo90/Desktop/STUDIES/Y2S2/NM2207/Website/DwayneYoongNM2207.github.io")
dogecoinData <- read.csv("dogecoin_prices_2021.csv")
elonMuskTweets <- read.csv("Emusk_2021_tweets.csv")
View(dogecoinData)
View(dogecoinData)
View(elonMuskTweets)
View(dogecoinData)
#load libraries here
library(tidyverse)
library(lubridate)#this will help with parsing date and time better
View(dogecoinData)
#so what we want to do here is to convert the time to something R can read
dogecoinData <- dogecoinData %>% mutate(open_time = dmy_hm(open_time))
View(dogecoinData)
instal.packages(shiny)
dogecoin_prices <- read_csv("path/to/your/dogecoin_prices_2021.csv") %>%
mutate(open_time = dmy_hm(open_time))
data_to_plot <- if (input$month == "Whole Year") {
dogecoin_prices
} else {
dogecoin_prices %>%
filter(month(open_time) == match(input$month, month.name))
}
# Read the CSV file
dogecoin_prices <- read_csv("dogecoin_prices_2021.csv")
#modify the open_time to something reader in datetime from ludidate
dogecoin_prices <- dogecoin_prices %>%
mutate(open_time = dmy_hm(open_time))
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
library(shiny)
library(tidyverse)
library(lubridate)
# Read the CSV file
dogecoin_prices <- read_csv("dogecoin_prices_2021.csv")
#modify the open_time to something reader in datetime from ludidate
dogecoin_prices <- dogecoin_prices %>%
mutate(open_time = dmy_hm(open_time))
#create the UI for quarto from shiny
ui <- fluidPage(
titlePanel("Dogecoin Price Chart"),
selectInput("month", "Select Month:",
choices = c("Whole Year", month.name),
selected = "Whole Year"),
plotOutput("pricePlot")
)
#now we create the server
server <- function(input, output) {
#now we deside if we have to filter or not, if its the whole year then we dont need to filter but if we do then we filter based on the month
output$pricePlot <- renderPlot({
data_to_plot <- if (input$month == "Whole Year") {
dogecoin_prices
} else {
dogecoin_prices %>%
filter(month(open_time) == match(input$month, month.name))
}
#standard plotting BUT
ggplot(data_to_plot, aes(x = open_time, y = price)) +
geom_line() +
theme_light() +
labs(title = paste("Time Series Plot of DOGE Prices in", input$month),
x = "Date",
y = "Price (USD)") + #this is something interesting as we can split and scale the X according to months or days dependent on the view they chose
scale_x_datetime(date_breaks = if (input$month == "Whole Year") "1 month" else "1 day",
date_labels = "%b %d")
})
}
shinyApp(ui,server)
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive")
install.packages("shinylive")
install.packages("httpuv")
install.packages("httpuv")
install.packages("httpuv")
packageVersion("shinylive")
packageVersion("httpuv")
httpuv::runStaticServer("docs/", port=8008)
shiny create myapp
shiny create myapp
shiny create myapp
shiny create
shiny static myapp docs
shinylive::export(appdir = "myapp", destdir = "docs")
shinylive::export(appdir = "DwayneYoongNM2207.github.io", destdir = "docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('myapp')
runApp('myapp')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
runApp('myapp')
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('myapp')
httpuv::runStaticServer("docs/", port=8008)
httpuv::runStaticServer("docs/", port=8008)
httpuv::runStaticServer("docs/", port=8008)
shinylive::export("myapp", "docs", subdir = "dogeapp")
runApp('myapp')
httpuv::runStaticServer("docs/12321")
httpuv::runStaticServer("docs/dogeapp")
shinylive::assets_info()
# Install the 'pak' package manager if you haven't already
install.packages("pak")
# Install 'r-shinylive' using 'pak'
pak::pak("posit-dev/r-shinylive")
quarto add quarto-ext/shinylive
quarto add quarto-ext/shinylive
# Read the CSV file
dogecoin_prices <- read_csv("../dogecoin_prices_2021.csv")
# Read the CSV file
dogecoin_prices <- read_csv("dogecoin_prices_2021.csv")
# Read the CSV file
library(tidyverse)
dogecoin_prices <- read_csv("dogecoin_prices_2021.csv")
#modify the open_time to something reader in datetime from ludidate
dogecoin_prices <- dogecoin_prices %>%
mutate(open_time = dmy_hm(open_time))
# Read the CSV file
library(tidyverse)
dogecoin_prices <- read_csv("dogecoin_prices_2021.csv")
#modify the open_time to something reader in datetime from ludidate
dogecoin_prices <- dogecoin_prices %>%
mutate(open_time = dmy_hm(open_time))
shiny::runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
setwd("C:/Users/spo90/Desktop/STUDIES/Y2S2/NM2207/Website/DwayneYoongNM2207.github.io")
#| context: setup
dogedata <- read.csv("dogecoin_prices_2021.csv")
View(dogedata)
install.packages("pak")
install.packages("pak")
pak::pak("posit-dev/r-shinylive")
s
shinylive
version(shinylive)
shiny::runApp('myapp')
runApp('myapp')
runApp('myapp')
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp('myapp')
rsconnect::setAccountInfo(name='dwayneyoongty00', token='CD6DB3D87D3DE562F727B717812907D5', secret='Qic0sfOJF18xS+OYfIlXzt+0Z1pkVkHs1rS7maQ4')
library(rsconnect)
deployapp()
deployApp()
